{"version":3,"sources":["SharedSnackbar.component.js","SharedSnackbar.context.js","ButtonA.component.js","ButtonB.component.js","App.js","serviceWorker.js","index.js"],"names":["SharedSnackbar","react_default","a","createElement","SharedSnackbarConsumer","_ref","snackbarIsOpen","message","closeSnackbar","index_es","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","key","color","onClick","icons_index_es","SharedSnackbarContext","React","createContext","SharedSnackbarProvider","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openSnackbar","setState","isOpen","state","inherits","createClass","value","children","Provider","SharedSnackbar_component","Component","Consumer","styles","button","margin","ButtonA","style","variant","ButtonB","app","display","justifyContent","alignItems","height","App","SharedSnackbar_context_SharedSnackbarProvider","ButtonA_component","ButtonB_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQA4BeA,EAtBQ,kBACrBC,EAAAC,EAAAC,cAACC,EAAD,KACG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,eAAgBC,EAAnBF,EAAmBE,QAASC,EAA5BH,EAA4BG,cAA5B,OACCP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdC,KAAMP,EACNQ,iBAAkB,IAClBC,QAASP,EACTD,QAASA,EACTS,OAAQ,CACNf,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYQ,IAAI,QAAQC,MAAM,UAAUC,QAASX,GAC/CP,EAAAC,EAAAC,cAACiB,EAAA,EAAD,aCjBNC,EAAwBC,IAAMC,gBAEvBC,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAQRQ,aAAe,SAAA3B,GACboB,EAAKQ,SAAS,CACZ5B,UACA6B,QAAQ,KAZOT,EAgBnBnB,cAAgB,WACdmB,EAAKQ,SAAS,CACZ5B,QAAS,GACT6B,QAAQ,KAhBVT,EAAKU,MAAQ,CACXD,QAAQ,EACR7B,QAAS,IALMoB,EADrB,OAAAC,OAAAU,EAAA,EAAAV,CAAAJ,EAAAC,GAAAG,OAAAW,EAAA,EAAAX,CAAAJ,EAAA,EAAAP,IAAA,SAAAuB,MAAA,WAwBW,IACCC,EAAaX,KAAKJ,MAAlBe,SAER,OACExC,EAAAC,EAAAC,cAACkB,EAAsBqB,SAAvB,CACEF,MAAO,CACLN,aAAcJ,KAAKI,aACnB1B,cAAesB,KAAKtB,cACpBF,eAAgBwB,KAAKO,MAAMD,OAC3B7B,QAASuB,KAAKO,MAAM9B,UAGrBN,EAAAC,EAAAC,cAACwC,EAAD,MAEAF,OAtCTjB,EAAA,CAA4CoB,aA4C/BxC,EAAyBiB,EAAsBwB,SC7CtDC,EAAS,CACbC,OAAQ,CACNC,OAAQ,IAmBGC,EAfC,kBACdhD,EAAAC,EAAAC,cAACC,EAAD,KACG,SAAAC,GAAA,IAAG6B,EAAH7B,EAAG6B,aAAH,OACCjC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEyC,MAAOJ,EAAOC,OACdI,QAAQ,SACRjC,MAAM,UACNC,QAAS,kBAAMe,EAAa,2BAJ9B,eCTAY,EAAS,CACbC,OAAQ,CACNC,OAAQ,IAmBGI,EAfC,kBACdnD,EAAAC,EAAAC,cAACC,EAAD,KACG,SAAAC,GAAA,IAAG6B,EAAH7B,EAAG6B,aAAH,OACCjC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEyC,MAAOJ,EAAOC,OACdI,QAAQ,SACRjC,MAAM,YACNC,QAAS,kBAAMe,EAAa,2BAJ9B,eCPAY,EAAS,CACbO,IAAK,CACHC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,UAiBGC,mLAXX,OACEzD,EAAAC,EAAAC,cAAA,OAAK+C,MAAOJ,EAAOO,KACjBpD,EAAAC,EAAAC,cAACwD,EAAD,KACE1D,EAAAC,EAAAC,cAACyD,EAAD,MACA3D,EAAAC,EAAAC,cAAC0D,EAAD,eANQjB,aCHEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f549bee1.chunk.js","sourcesContent":["\nimport { IconButton, Snackbar } from '@material-ui/core';\nimport { Close } from '@material-ui/icons';\nimport React from 'react';\nimport { SharedSnackbarConsumer } from './SharedSnackbar.context';\n\nconst SharedSnackbar = () => (\n  <SharedSnackbarConsumer>\n    {({ snackbarIsOpen, message, closeSnackbar }) => (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={snackbarIsOpen}\n        autoHideDuration={6000}\n        onClose={closeSnackbar}\n        message={message}\n        action={[\n          <IconButton key=\"close\" color=\"inherit\" onClick={closeSnackbar}>\n            <Close />\n          </IconButton>,\n        ]}\n      />\n    )}\n  </SharedSnackbarConsumer>\n);\n\nexport default SharedSnackbar;","import React, { Component } from 'react';\nimport SharedSnackbar from './SharedSnackbar.component';\n\nconst SharedSnackbarContext = React.createContext();\n\nexport class SharedSnackbarProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n      message: '',\n    };\n  }\n\n  openSnackbar = message => {\n    this.setState({\n      message,\n      isOpen: true,\n    });\n  };\n\n  closeSnackbar = () => {\n    this.setState({\n      message: '',\n      isOpen: false,\n    });\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <SharedSnackbarContext.Provider\n        value={{\n          openSnackbar: this.openSnackbar,\n          closeSnackbar: this.closeSnackbar,\n          snackbarIsOpen: this.state.isOpen,\n          message: this.state.message,\n        }}\n      >\n         <SharedSnackbar /> \n      \n        {children}\n      </SharedSnackbarContext.Provider>\n    );\n  }\n}\n\nexport const SharedSnackbarConsumer = SharedSnackbarContext.Consumer;","import { Button } from '@material-ui/core';\nimport React from 'react';\nimport { SharedSnackbarConsumer } from './SharedSnackbar.context';\n\nconst styles = {\n  button: {\n    margin: 8,\n  },\n};\n\nconst ButtonA = () => (\n  <SharedSnackbarConsumer>\n    {({ openSnackbar }) => (\n      <Button\n        style={styles.button}\n        variant=\"raised\"\n        color=\"primary\"\n        onClick={() => openSnackbar('You clicked Button A!')}\n      >\n        Button A\n      </Button>\n    )}\n  </SharedSnackbarConsumer>\n);\n\nexport default ButtonA;","import { Button } from '@material-ui/core';\nimport React from 'react';\nimport { SharedSnackbarConsumer } from './SharedSnackbar.context';\n\nconst styles = {\n  button: {\n    margin: 8,\n  },\n};\n\nconst ButtonB = () => (\n  <SharedSnackbarConsumer>\n    {({ openSnackbar }) => (\n      <Button\n        style={styles.button}\n        variant=\"raised\"\n        color=\"secondary\"\n        onClick={() => openSnackbar('You clicked Button B!')}\n      >\n        Button B\n      </Button>\n    )}\n  </SharedSnackbarConsumer>\n);\n\nexport default ButtonB;","\nimport React, { Component } from 'react';\nimport ButtonA from './ButtonA.component';\nimport ButtonB from './ButtonB.component';\nimport { SharedSnackbarProvider } from './SharedSnackbar.context';\n\nconst styles = {\n  app: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n  },\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={styles.app}>\n        <SharedSnackbarProvider>\n          <ButtonA />\n          <ButtonB />\n        </SharedSnackbarProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}